# Deploying apps

## Deploying public apps

By default, all apps you deploy on Cloud Foundry are publicly accessible to everyone through the internet.

The `cf push` command can both create a new app and push a new version of an existing app.

1. Put your app's code and configuration files in a local directory.

1. [Target](deploying_apps.html#set-a-target) the appropriate organisation and space by running:

    ```
    cf target -o ORG_NAME -s SPACE_NAME
    ```

    where `ORG_NAME` is the name of the org, and `SPACE_NAME` is the name of the space.

1. Create a `manifest.yml` file in the same local directory as your app's code. The manifest file tells Cloud Foundry what to do with your app. An example manifest:

    ```
    ---
    applications:
    - name: APP_NAME
    ```

    where `APP_NAME` is the unique name for your app. You can run `cf apps` to see apps which already exist.

1. Deploy your app by running the following in the directory which contains your app's code, configuration files, and manifest:

    ```
    cf push
    ```

Your app should now be live at your [app domain](/orgs_spaces_users.html#regions).

Refer to the [Cloud Foundry documentation on deploying with app manifests](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html) for more information on the options available when you deploy an app.

Refer to the [production checklist](deploying_apps.html#production-checklist) if your app is a production app.

### Set a target

To deploy an app, you need to set a target. A target is a combination of an org and a space.

Run the following to set the target:

```
cf target -o ORG_NAME -s SPACE_NAME
```

where `ORG_NAME` is the name of the org, and `SPACE_NAME` is the name of the space.

The Cloud Foundry client remembers the target until you change it.

You can change space without changing org by running:

```
cf target -s SPACE_NAME
```

You should target the sandbox space while you are testing your app. You can do this by running:

```
cf target -s sandbox
```

You will not normally need to target the sandbox space if you are a new user, as this space is the default for new users.

A possible exception to this is if your org is mature and has pre-existing spaces; you should check to ensure that you target the appropriate space for testing.

### Caveats
* Your app should not write to local storage. Cloud Foundry local storage is ephemeral and can be deleted at any time.
* You may need to set environment variables for your app to work. All configuration information should be stored in environment variables, not in the code.
* Instances will be restarted if they [exceed memory limits](managing_apps.html#quotas).
* Your application should write all its log messages to `STDOUT`/`STDERR`, rather than a log file.


## Deploying private apps

You can deploy apps so they are not publicly accessible to everyone through the internet.

The simplest use case is that you have 2 apps to deploy:

- a public app for your end users to interact with
- a private app that the public app can securely connect to, but which is not accessible from the internet

To achieve this, you must:

- specify the private route in the private app's manifest
- set the private app URL as an [environment variable](/deploying_apps.html#environment-variables) in the public app's manifest
- create a network policy to allow the apps to connect with each other

If you need to restrict access to a public app, you should refer to the documentation on [route services](/deploying_services/route_services/#route-services).

### Specify a private route in the private app's manifest

Cloud Foundry uses routes to send requests to apps.

You must specify a private route in the private app's manifest to tell Cloud Foundry that this app should not be accessible from the internet.

Create the private app's `manifest.yml` with the following code:

```
---
applications:
- name: PRIVATE_APPNAME
  routes:
  - route: PRIVATE_APPNAME.apps.internal
```

If the private app was previously a public app, you must also run the following in the command line to remove the pre-existing public route:

```
cf unmap-route PRIVATE_APPNAME DOMAIN --hostname HOSTNAME
```

Refer to the [Cloud Foundry documentation on routes](https://docs.cloudfoundry.org/devguide/deploy-apps/routes-domains.html#routes) for more information.

### Set the private app URL in the public app's manifest

The public app must read the private app URL from an [environment variable](/deploying_apps.html#environment-variables) in the public app's manifest.

<br>

<%= warning_text('Connections between public and private apps are not encrypted by default. If you need encrypted connections between your apps, it is your responsibility to implement this.') %>

You must set:

- the private app URL as a non-secure `http` URL
- the domain as `apps.internal`
- the URL as port `8080`

To do this, create the public app's `manifest.yml` with the following code:

```
---
applications:
- name: PUBLIC_APPNAME
  env:
    ENVIRONMENT_VARIABLE_NAME: http://PRIVATE_APPNAME.apps.internal:8080
```

where:

- `PUBLIC_APPNAME` is the name of your public app
- `ENVIRONMENT_VARIABLE_NAME` is the [environment variable](#environment-variables) your public app reads (for example `PRIVATE_APP_URL`)
- `PRIVATE_APPNAME` is the name of your private app

### Create a network policy

By default, Cloud Foundry apps do not accept internal connections from other apps.

You must create a [network policy](https://cli.cloudfoundry.org/en-US/cf/add-network-policy.html) to allow the public app to connect to the private app.

1. [Push](/deploying_apps.html#deploying-public-apps) both the public and private apps.
1. Run the following in the command line to create the network policy:

```
cf add-network-policy PUBLIC_APPNAME --destination-app PRIVATE_APPNAME --protocol tcp --port 8080
```

#### Recreate the network policy

You must recreate the network policy every time you push your app if you’re using both:

- [version 2 of the Cloud Foundry API](https://github.com/cloudfoundry/cloud_controller_ng/tree/master/docs/v2)
- a [blue-green deployment tool](https://docs.cloudfoundry.org/devguide/deploy-apps/blue-green.html) to reduce downtime

This is because every time you push your app, the blue-green deployment tool creates a new version of the public app. The existing network policy will then no longer work.

[Version 3 of the Cloud Foundry API](https://github.com/cloudfoundry/cloud_controller_ng/tree/master/docs/v3) deploys your app with zero downtime. You do not need to recreate the network policy every time you push your app.

Contact us at [gov-uk-paas-support@digital.cabinet-office.gov.uk](mailto:gov-uk-paas-support@digital.cabinet-office.gov.uk) if you have any questions.

## Data security classification

You can store data classified up to ‘official’ on the GOV.UK PaaS.

You cannot store data classified ‘secret‘ or ‘top secret‘ on the GOV.UK PaaS.

Refer to the [information assurance page](https://www.cloud.service.gov.uk/ia) for information on the assurance process.

Refer to the [GOV.UK page on government security classifications](https://www.gov.uk/government/publications/government-security-classifications) for more information on these classifications.

## Secure and non-secure requests

Requests could be made to an app's public route over the non-secure `http://` protocol due to:

 * misconfiguration of an app that allows non-encrypted traffic through
 * a service linking to the HTTP version of a page by mistake

Any requests made to a public app route over the `http://` protocol will be automatically redirected to the base `https://` version of that URL. The original query path and query parameters will be removed. This prevents a site from repeatedly redirecting back to the HTTP protocol without the user noticing.
